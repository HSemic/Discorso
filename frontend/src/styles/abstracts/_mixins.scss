@use 'sass:math';

@mixin respondMax($breakpoint) {
  @media (max-width: math.div($breakpoint, 16px) * 1em) {
    @content;
  }
}

@mixin respondMin($breakpoint) {
  @media (min-width: math.div($breakpoint, 16px) * 1em) {
    @content;
  }
}

@mixin fixedWidth($width) {
  width: $width !important;
}

@mixin flexColumns($gap) {
  $col-1-of-2-width: calc((100% - #{$gap}) / 2);
  $col-1-of-3-width: calc((100% - (2 * #{$gap})) / 3);
  $col-1-of-4-width: calc((100% - (3 * #{$gap})) / 4);

  .col {
    &-1-of-1 {
      flex: 0 0 100%;
    }

    &-1-of-2 {
      flex: 0 0 calc((100% - #{$gap}) / 2);
    }

    &-1-of-3 {
      flex: 0 0 $col-1-of-3-width;
    }

    &-2-of-3 {
      flex: 0 0 calc((100% - (1 * #{$gap})) - #{$col-1-of-3-width});
    }

    &-1-of-4 {
      flex: 0 0 calc((100% - (3 * #{$gap})) / 4);
    }

    &-2-of-4 {
      flex: 0 0 calc(2 * $col-1-of-4-width + $gap);
    }

    &-3-of-4 {
      flex: 0 0 calc(100% - #{$gap} - #{$col-1-of-4-width});
    }
  }
}

// Theme switcher

@function themed($key) {
  @return map-get($theme-map, $key);
}

@mixin themify($themes: $themes) {
  @each $theme, $map in $themes {
    .theme-#{$theme} & {
      $theme-map: () !global;
      @each $key, $submap in $map {
        $value: map-get(map-get($themes, $theme), '#{$key}');
        $theme-map: map-merge(
          $theme-map,
          (
            $key: $value
          )
        ) !global;
      }

      @content;
      $theme-map: null !global;
    }
  }
}
